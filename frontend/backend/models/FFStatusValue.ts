/* tslint:disable */
/* eslint-disable */
/**
 * live-cmaf-transcoder
 * API for the Live CMAF Transcoder
 *
 * The version of the OpenAPI document: 0.1.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CoreState } from './CoreState';
import {
    CoreStateFromJSON,
    CoreStateFromJSONTyped,
    CoreStateToJSON,
    CoreStateToJSONTyped,
} from './CoreState';

/**
 * 
 * @export
 * @interface FFStatusValue
 */
export interface FFStatusValue {
    /**
     * 
     * @type {string}
     * @memberof FFStatusValue
     */
    configUid: string;
    /**
     * 
     * @type {number}
     * @memberof FFStatusValue
     */
    cpuUsage: number;
    /**
     * 
     * @type {CoreState}
     * @memberof FFStatusValue
     */
    currentState: CoreState;
    /**
     * 
     * @type {number}
     * @memberof FFStatusValue
     */
    dropFrames: number;
    /**
     * 
     * @type {number}
     * @memberof FFStatusValue
     */
    duplicateFrames: number;
    /**
     * 
     * @type {number}
     * @memberof FFStatusValue
     */
    fps: number;
    /**
     * 
     * @type {number}
     * @memberof FFStatusValue
     */
    memoryUsage: number;
    /**
     * 
     * @type {number}
     * @memberof FFStatusValue
     */
    nbRestart: number;
    /**
     * 
     * @type {number}
     * @memberof FFStatusValue
     */
    outTimeMs: number;
    /**
     * 
     * @type {number}
     * @memberof FFStatusValue
     */
    speed: number;
}



/**
 * Check if a given object implements the FFStatusValue interface.
 */
export function instanceOfFFStatusValue(value: object): value is FFStatusValue {
    if (!('configUid' in value) || value['configUid'] === undefined) return false;
    if (!('cpuUsage' in value) || value['cpuUsage'] === undefined) return false;
    if (!('currentState' in value) || value['currentState'] === undefined) return false;
    if (!('dropFrames' in value) || value['dropFrames'] === undefined) return false;
    if (!('duplicateFrames' in value) || value['duplicateFrames'] === undefined) return false;
    if (!('fps' in value) || value['fps'] === undefined) return false;
    if (!('memoryUsage' in value) || value['memoryUsage'] === undefined) return false;
    if (!('nbRestart' in value) || value['nbRestart'] === undefined) return false;
    if (!('outTimeMs' in value) || value['outTimeMs'] === undefined) return false;
    if (!('speed' in value) || value['speed'] === undefined) return false;
    return true;
}

export function FFStatusValueFromJSON(json: any): FFStatusValue {
    return FFStatusValueFromJSONTyped(json, false);
}

export function FFStatusValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): FFStatusValue {
    if (json == null) {
        return json;
    }
    return {
        
        'configUid': json['config_uid'],
        'cpuUsage': json['cpu_usage'],
        'currentState': CoreStateFromJSON(json['current_state']),
        'dropFrames': json['drop_frames'],
        'duplicateFrames': json['duplicate_frames'],
        'fps': json['fps'],
        'memoryUsage': json['memory_usage'],
        'nbRestart': json['nb_restart'],
        'outTimeMs': json['out_time_ms'],
        'speed': json['speed'],
    };
}

  export function FFStatusValueToJSON(json: any): FFStatusValue {
      return FFStatusValueToJSONTyped(json, false);
  }

  export function FFStatusValueToJSONTyped(value?: FFStatusValue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'config_uid': value['configUid'],
        'cpu_usage': value['cpuUsage'],
        'current_state': CoreStateToJSON(value['currentState']),
        'drop_frames': value['dropFrames'],
        'duplicate_frames': value['duplicateFrames'],
        'fps': value['fps'],
        'memory_usage': value['memoryUsage'],
        'nb_restart': value['nbRestart'],
        'out_time_ms': value['outTimeMs'],
        'speed': value['speed'],
    };
}

