/* tslint:disable */
/* eslint-disable */
/**
 * live-cmaf-transcoder
 * API for the Live CMAF Transcoder
 *
 * The version of the OpenAPI document: 0.1.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VideoEncoder } from './VideoEncoder';
import {
    VideoEncoderFromJSON,
    VideoEncoderFromJSONTyped,
    VideoEncoderToJSON,
    VideoEncoderToJSONTyped,
} from './VideoEncoder';
import type { VideoRepresentation } from './VideoRepresentation';
import {
    VideoRepresentationFromJSON,
    VideoRepresentationFromJSONTyped,
    VideoRepresentationToJSON,
    VideoRepresentationToJSONTyped,
} from './VideoRepresentation';

/**
 * 
 * @export
 * @interface VideoAdaptationSet
 */
export interface VideoAdaptationSet {
    /**
     * 
     * @type {number}
     * @memberof VideoAdaptationSet
     */
    aspectRatioDen?: number | null;
    /**
     * 
     * @type {number}
     * @memberof VideoAdaptationSet
     */
    aspectRatioNum?: number | null;
    /**
     * 
     * @type {VideoEncoder}
     * @memberof VideoAdaptationSet
     */
    encoder: VideoEncoder;
    /**
     * 
     * @type {number}
     * @memberof VideoAdaptationSet
     */
    framerateDen: number;
    /**
     * 
     * @type {number}
     * @memberof VideoAdaptationSet
     */
    framerateNum: number;
    /**
     * 
     * @type {Array<VideoRepresentation>}
     * @memberof VideoAdaptationSet
     */
    representations: Array<VideoRepresentation>;
}



/**
 * Check if a given object implements the VideoAdaptationSet interface.
 */
export function instanceOfVideoAdaptationSet(value: object): value is VideoAdaptationSet {
    if (!('encoder' in value) || value['encoder'] === undefined) return false;
    if (!('framerateDen' in value) || value['framerateDen'] === undefined) return false;
    if (!('framerateNum' in value) || value['framerateNum'] === undefined) return false;
    if (!('representations' in value) || value['representations'] === undefined) return false;
    return true;
}

export function VideoAdaptationSetFromJSON(json: any): VideoAdaptationSet {
    return VideoAdaptationSetFromJSONTyped(json, false);
}

export function VideoAdaptationSetFromJSONTyped(json: any, ignoreDiscriminator: boolean): VideoAdaptationSet {
    if (json == null) {
        return json;
    }
    return {
        
        'aspectRatioDen': json['aspect_ratio_den'] == null ? undefined : json['aspect_ratio_den'],
        'aspectRatioNum': json['aspect_ratio_num'] == null ? undefined : json['aspect_ratio_num'],
        'encoder': VideoEncoderFromJSON(json['encoder']),
        'framerateDen': json['framerate_den'],
        'framerateNum': json['framerate_num'],
        'representations': ((json['representations'] as Array<any>).map(VideoRepresentationFromJSON)),
    };
}

  export function VideoAdaptationSetToJSON(json: any): VideoAdaptationSet {
      return VideoAdaptationSetToJSONTyped(json, false);
  }

  export function VideoAdaptationSetToJSONTyped(value?: VideoAdaptationSet | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'aspect_ratio_den': value['aspectRatioDen'],
        'aspect_ratio_num': value['aspectRatioNum'],
        'encoder': VideoEncoderToJSON(value['encoder']),
        'framerate_den': value['framerateDen'],
        'framerate_num': value['framerateNum'],
        'representations': ((value['representations'] as Array<any>).map(VideoRepresentationToJSON)),
    };
}

