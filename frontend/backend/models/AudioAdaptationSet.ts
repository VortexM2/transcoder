/* tslint:disable */
/* eslint-disable */
/**
 * live-cmaf-transcoder
 * API for the Live CMAF Transcoder
 *
 * The version of the OpenAPI document: 0.1.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Audioprofile } from './Audioprofile';
import {
    AudioprofileFromJSON,
    AudioprofileFromJSONTyped,
    AudioprofileToJSON,
    AudioprofileToJSONTyped,
} from './Audioprofile';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
    RoleToJSONTyped,
} from './Role';
import type { AudioEncoder } from './AudioEncoder';
import {
    AudioEncoderFromJSON,
    AudioEncoderFromJSONTyped,
    AudioEncoderToJSON,
    AudioEncoderToJSONTyped,
} from './AudioEncoder';

/**
 * 
 * @export
 * @interface AudioAdaptationSet
 */
export interface AudioAdaptationSet {
    /**
     * 
     * @type {number}
     * @memberof AudioAdaptationSet
     */
    bitrate: number;
    /**
     * 
     * @type {AudioEncoder}
     * @memberof AudioAdaptationSet
     */
    encoder: AudioEncoder;
    /**
     * 
     * @type {Audioprofile}
     * @memberof AudioAdaptationSet
     */
    profile?: Audioprofile;
    /**
     * 
     * @type {Role}
     * @memberof AudioAdaptationSet
     */
    role: Role;
    /**
     * 
     * @type {number}
     * @memberof AudioAdaptationSet
     */
    sampleRate: number;
}



/**
 * Check if a given object implements the AudioAdaptationSet interface.
 */
export function instanceOfAudioAdaptationSet(value: object): value is AudioAdaptationSet {
    if (!('bitrate' in value) || value['bitrate'] === undefined) return false;
    if (!('encoder' in value) || value['encoder'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('sampleRate' in value) || value['sampleRate'] === undefined) return false;
    return true;
}

export function AudioAdaptationSetFromJSON(json: any): AudioAdaptationSet {
    return AudioAdaptationSetFromJSONTyped(json, false);
}

export function AudioAdaptationSetFromJSONTyped(json: any, ignoreDiscriminator: boolean): AudioAdaptationSet {
    if (json == null) {
        return json;
    }
    return {
        
        'bitrate': json['bitrate'],
        'encoder': AudioEncoderFromJSON(json['encoder']),
        'profile': json['profile'] == null ? undefined : AudioprofileFromJSON(json['profile']),
        'role': RoleFromJSON(json['role']),
        'sampleRate': json['sample_rate'],
    };
}

  export function AudioAdaptationSetToJSON(json: any): AudioAdaptationSet {
      return AudioAdaptationSetToJSONTyped(json, false);
  }

  export function AudioAdaptationSetToJSONTyped(value?: AudioAdaptationSet | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bitrate': value['bitrate'],
        'encoder': AudioEncoderToJSON(value['encoder']),
        'profile': AudioprofileToJSON(value['profile']),
        'role': RoleToJSON(value['role']),
        'sample_rate': value['sampleRate'],
    };
}

