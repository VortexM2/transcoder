/* tslint:disable */
/* eslint-disable */
/**
 * live-cmaf-transcoder
 * API for the Live CMAF Transcoder
 *
 * The version of the OpenAPI document: 0.1.51
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ServerCapability } from './ServerCapability';
import {
    ServerCapabilityFromJSON,
    ServerCapabilityFromJSONTyped,
    ServerCapabilityToJSON,
    ServerCapabilityToJSONTyped,
} from './ServerCapability';
import type { Gpu } from './Gpu';
import {
    GpuFromJSON,
    GpuFromJSONTyped,
    GpuToJSON,
    GpuToJSONTyped,
} from './Gpu';

/**
 * 
 * @export
 * @interface Server
 */
export interface Server {
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    baseUrl: string;
    /**
     * 
     * @type {Array<ServerCapability>}
     * @memberof Server
     */
    capabilities: Array<ServerCapability>;
    /**
     * 
     * @type {Array<Gpu>}
     * @memberof Server
     */
    gpus: Array<Gpu>;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Server
     */
    port: number;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    uid: string;
    /**
     * 
     * @type {string}
     * @memberof Server
     */
    version: string;
}

/**
 * Check if a given object implements the Server interface.
 */
export function instanceOfServer(value: object): value is Server {
    if (!('baseUrl' in value) || value['baseUrl'] === undefined) return false;
    if (!('capabilities' in value) || value['capabilities'] === undefined) return false;
    if (!('gpus' in value) || value['gpus'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('port' in value) || value['port'] === undefined) return false;
    if (!('uid' in value) || value['uid'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    return true;
}

export function ServerFromJSON(json: any): Server {
    return ServerFromJSONTyped(json, false);
}

export function ServerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Server {
    if (json == null) {
        return json;
    }
    return {
        
        'baseUrl': json['base_url'],
        'capabilities': ((json['capabilities'] as Array<any>).map(ServerCapabilityFromJSON)),
        'gpus': ((json['gpus'] as Array<any>).map(GpuFromJSON)),
        'name': json['name'],
        'port': json['port'],
        'uid': json['uid'],
        'version': json['version'],
    };
}

  export function ServerToJSON(json: any): Server {
      return ServerToJSONTyped(json, false);
  }

  export function ServerToJSONTyped(value?: Server | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'base_url': value['baseUrl'],
        'capabilities': ((value['capabilities'] as Array<any>).map(ServerCapabilityToJSON)),
        'gpus': ((value['gpus'] as Array<any>).map(GpuToJSON)),
        'name': value['name'],
        'port': value['port'],
        'uid': value['uid'],
        'version': value['version'],
    };
}

