/* tslint:disable */
/* eslint-disable */
/**
 * live-cmaf-transcoder
 * API for the Live CMAF Transcoder
 *
 * The version of the OpenAPI document: 0.1.63
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VideoFilterDrawText } from './VideoFilterDrawText';
import {
    VideoFilterDrawTextFromJSON,
    VideoFilterDrawTextFromJSONTyped,
    VideoFilterDrawTextToJSON,
    VideoFilterDrawTextToJSONTyped,
} from './VideoFilterDrawText';
import type { Preset } from './Preset';
import {
    PresetFromJSON,
    PresetFromJSONTyped,
    PresetToJSON,
    PresetToJSONTyped,
} from './Preset';
import type { Profile } from './Profile';
import {
    ProfileFromJSON,
    ProfileFromJSONTyped,
    ProfileToJSON,
    ProfileToJSONTyped,
} from './Profile';

/**
 * 
 * @export
 * @interface VideoRepresentation
 */
export interface VideoRepresentation {
    /**
     * 
     * @type {number}
     * @memberof VideoRepresentation
     */
    bitrate: number;
    /**
     * 
     * @type {number}
     * @memberof VideoRepresentation
     */
    bufSize?: number | null;
    /**
     * 
     * @type {number}
     * @memberof VideoRepresentation
     */
    height: number;
    /**
     * 
     * @type {number}
     * @memberof VideoRepresentation
     */
    maxBitrate: number;
    /**
     * 
     * @type {Preset}
     * @memberof VideoRepresentation
     */
    preset: Preset;
    /**
     * 
     * @type {Profile}
     * @memberof VideoRepresentation
     */
    profile: Profile;
    /**
     * 
     * @type {VideoFilterDrawText}
     * @memberof VideoRepresentation
     */
    text: VideoFilterDrawText;
    /**
     * 
     * @type {number}
     * @memberof VideoRepresentation
     */
    width: number;
}



/**
 * Check if a given object implements the VideoRepresentation interface.
 */
export function instanceOfVideoRepresentation(value: object): value is VideoRepresentation {
    if (!('bitrate' in value) || value['bitrate'] === undefined) return false;
    if (!('height' in value) || value['height'] === undefined) return false;
    if (!('maxBitrate' in value) || value['maxBitrate'] === undefined) return false;
    if (!('preset' in value) || value['preset'] === undefined) return false;
    if (!('profile' in value) || value['profile'] === undefined) return false;
    if (!('text' in value) || value['text'] === undefined) return false;
    if (!('width' in value) || value['width'] === undefined) return false;
    return true;
}

export function VideoRepresentationFromJSON(json: any): VideoRepresentation {
    return VideoRepresentationFromJSONTyped(json, false);
}

export function VideoRepresentationFromJSONTyped(json: any, ignoreDiscriminator: boolean): VideoRepresentation {
    if (json == null) {
        return json;
    }
    return {
        
        'bitrate': json['bitrate'],
        'bufSize': json['buf_size'] == null ? undefined : json['buf_size'],
        'height': json['height'],
        'maxBitrate': json['max_bitrate'],
        'preset': PresetFromJSON(json['preset']),
        'profile': ProfileFromJSON(json['profile']),
        'text': VideoFilterDrawTextFromJSON(json['text']),
        'width': json['width'],
    };
}

  export function VideoRepresentationToJSON(json: any): VideoRepresentation {
      return VideoRepresentationToJSONTyped(json, false);
  }

  export function VideoRepresentationToJSONTyped(value?: VideoRepresentation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bitrate': value['bitrate'],
        'buf_size': value['bufSize'],
        'height': value['height'],
        'max_bitrate': value['maxBitrate'],
        'preset': PresetToJSON(value['preset']),
        'profile': ProfileToJSON(value['profile']),
        'text': VideoFilterDrawTextToJSON(value['text']),
        'width': value['width'],
    };
}

