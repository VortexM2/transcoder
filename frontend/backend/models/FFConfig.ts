/* tslint:disable */
/* eslint-disable */
/**
 * live-cmaf-transcoder
 * API for the Live CMAF Transcoder
 *
 * The version of the OpenAPI document: 0.1.35
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MPDType } from './MPDType';
import {
    MPDTypeFromJSON,
    MPDTypeFromJSONTyped,
    MPDTypeToJSON,
    MPDTypeToJSONTyped,
} from './MPDType';
import type { Srt } from './Srt';
import {
    SrtFromJSON,
    SrtFromJSONTyped,
    SrtToJSON,
    SrtToJSONTyped,
} from './Srt';
import type { State } from './State';
import {
    StateFromJSON,
    StateFromJSONTyped,
    StateToJSON,
    StateToJSONTyped,
} from './State';
import type { Colorspace } from './Colorspace';
import {
    ColorspaceFromJSON,
    ColorspaceFromJSONTyped,
    ColorspaceToJSON,
    ColorspaceToJSONTyped,
} from './Colorspace';
import type { Acceleration } from './Acceleration';
import {
    AccelerationFromJSON,
    AccelerationFromJSONTyped,
    AccelerationToJSON,
    AccelerationToJSONTyped,
} from './Acceleration';
import type { VideoAdaptationSet } from './VideoAdaptationSet';
import {
    VideoAdaptationSetFromJSON,
    VideoAdaptationSetFromJSONTyped,
    VideoAdaptationSetToJSON,
    VideoAdaptationSetToJSONTyped,
} from './VideoAdaptationSet';
import type { AudioAdaptationSet } from './AudioAdaptationSet';
import {
    AudioAdaptationSetFromJSON,
    AudioAdaptationSetFromJSONTyped,
    AudioAdaptationSetToJSON,
    AudioAdaptationSetToJSONTyped,
} from './AudioAdaptationSet';
import type { VideoFilterDeinterlace } from './VideoFilterDeinterlace';
import {
    VideoFilterDeinterlaceFromJSON,
    VideoFilterDeinterlaceFromJSONTyped,
    VideoFilterDeinterlaceToJSON,
    VideoFilterDeinterlaceToJSONTyped,
} from './VideoFilterDeinterlace';

/**
 * 
 * @export
 * @interface FFConfig
 */
export interface FFConfig {
    /**
     * 
     * @type {Acceleration}
     * @memberof FFConfig
     */
    acceleration?: Acceleration;
    /**
     * 
     * @type {number}
     * @memberof FFConfig
     */
    astDelayMs: number;
    /**
     * 
     * @type {AudioAdaptationSet}
     * @memberof FFConfig
     */
    audioAdaptationSet: AudioAdaptationSet;
    /**
     * 
     * @type {Colorspace}
     * @memberof FFConfig
     */
    colorspace: Colorspace;
    /**
     * 
     * @type {VideoFilterDeinterlace}
     * @memberof FFConfig
     */
    deinterlace: VideoFilterDeinterlace;
    /**
     * 
     * @type {boolean}
     * @memberof FFConfig
     */
    enableHls: boolean;
    /**
     * 
     * @type {string}
     * @memberof FFConfig
     */
    encryptionKey?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FFConfig
     */
    encryptionKid?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FFConfig
     */
    gpuUid: string;
    /**
     * 
     * @type {string}
     * @memberof FFConfig
     */
    initSegName: string;
    /**
     * 
     * @type {Srt}
     * @memberof FFConfig
     */
    input: Srt;
    /**
     * 
     * @type {string}
     * @memberof FFConfig
     */
    mediaSegName: string;
    /**
     * 
     * @type {MPDType}
     * @memberof FFConfig
     */
    mpdType: MPDType;
    /**
     * 
     * @type {string}
     * @memberof FFConfig
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof FFConfig
     */
    output: string;
    /**
     * 
     * @type {number}
     * @memberof FFConfig
     */
    segmentDurationMs: number;
    /**
     * 
     * @type {string}
     * @memberof FFConfig
     */
    serverUid: string;
    /**
     * 
     * @type {State}
     * @memberof FFConfig
     */
    state: State;
    /**
     * 
     * @type {string}
     * @memberof FFConfig
     */
    uid: string;
    /**
     * 
     * @type {string}
     * @memberof FFConfig
     */
    utcTimingUrl?: string | null;
    /**
     * 
     * @type {Array<VideoAdaptationSet>}
     * @memberof FFConfig
     */
    videoAdaptationSet: Array<VideoAdaptationSet>;
    /**
     * 
     * @type {number}
     * @memberof FFConfig
     */
    windowSize: number;
}



/**
 * Check if a given object implements the FFConfig interface.
 */
export function instanceOfFFConfig(value: object): value is FFConfig {
    if (!('astDelayMs' in value) || value['astDelayMs'] === undefined) return false;
    if (!('audioAdaptationSet' in value) || value['audioAdaptationSet'] === undefined) return false;
    if (!('colorspace' in value) || value['colorspace'] === undefined) return false;
    if (!('deinterlace' in value) || value['deinterlace'] === undefined) return false;
    if (!('enableHls' in value) || value['enableHls'] === undefined) return false;
    if (!('gpuUid' in value) || value['gpuUid'] === undefined) return false;
    if (!('initSegName' in value) || value['initSegName'] === undefined) return false;
    if (!('input' in value) || value['input'] === undefined) return false;
    if (!('mediaSegName' in value) || value['mediaSegName'] === undefined) return false;
    if (!('mpdType' in value) || value['mpdType'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('output' in value) || value['output'] === undefined) return false;
    if (!('segmentDurationMs' in value) || value['segmentDurationMs'] === undefined) return false;
    if (!('serverUid' in value) || value['serverUid'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('uid' in value) || value['uid'] === undefined) return false;
    if (!('videoAdaptationSet' in value) || value['videoAdaptationSet'] === undefined) return false;
    if (!('windowSize' in value) || value['windowSize'] === undefined) return false;
    return true;
}

export function FFConfigFromJSON(json: any): FFConfig {
    return FFConfigFromJSONTyped(json, false);
}

export function FFConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): FFConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'acceleration': json['acceleration'] == null ? undefined : AccelerationFromJSON(json['acceleration']),
        'astDelayMs': json['ast_delay_ms'],
        'audioAdaptationSet': AudioAdaptationSetFromJSON(json['audio_adaptation_set']),
        'colorspace': ColorspaceFromJSON(json['colorspace']),
        'deinterlace': VideoFilterDeinterlaceFromJSON(json['deinterlace']),
        'enableHls': json['enable_hls'],
        'encryptionKey': json['encryption_key'] == null ? undefined : json['encryption_key'],
        'encryptionKid': json['encryption_kid'] == null ? undefined : json['encryption_kid'],
        'gpuUid': json['gpu_uid'],
        'initSegName': json['init_seg_name'],
        'input': SrtFromJSON(json['input']),
        'mediaSegName': json['media_seg_name'],
        'mpdType': MPDTypeFromJSON(json['mpd_type']),
        'name': json['name'],
        'output': json['output'],
        'segmentDurationMs': json['segment_duration_ms'],
        'serverUid': json['server_uid'],
        'state': StateFromJSON(json['state']),
        'uid': json['uid'],
        'utcTimingUrl': json['utc_timing_url'] == null ? undefined : json['utc_timing_url'],
        'videoAdaptationSet': ((json['video_adaptation_set'] as Array<any>).map(VideoAdaptationSetFromJSON)),
        'windowSize': json['window_size'],
    };
}

  export function FFConfigToJSON(json: any): FFConfig {
      return FFConfigToJSONTyped(json, false);
  }

  export function FFConfigToJSONTyped(value?: FFConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'acceleration': AccelerationToJSON(value['acceleration']),
        'ast_delay_ms': value['astDelayMs'],
        'audio_adaptation_set': AudioAdaptationSetToJSON(value['audioAdaptationSet']),
        'colorspace': ColorspaceToJSON(value['colorspace']),
        'deinterlace': VideoFilterDeinterlaceToJSON(value['deinterlace']),
        'enable_hls': value['enableHls'],
        'encryption_key': value['encryptionKey'],
        'encryption_kid': value['encryptionKid'],
        'gpu_uid': value['gpuUid'],
        'init_seg_name': value['initSegName'],
        'input': SrtToJSON(value['input']),
        'media_seg_name': value['mediaSegName'],
        'mpd_type': MPDTypeToJSON(value['mpdType']),
        'name': value['name'],
        'output': value['output'],
        'segment_duration_ms': value['segmentDurationMs'],
        'server_uid': value['serverUid'],
        'state': StateToJSON(value['state']),
        'uid': value['uid'],
        'utc_timing_url': value['utcTimingUrl'],
        'video_adaptation_set': ((value['videoAdaptationSet'] as Array<any>).map(VideoAdaptationSetToJSON)),
        'window_size': value['windowSize'],
    };
}

