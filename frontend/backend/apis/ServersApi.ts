/* tslint:disable */
/* eslint-disable */
/**
 * live-cmaf-transcoder
 * API for the Live CMAF Transcoder
 *
 * The version of the OpenAPI document: 0.1.63
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InConfigID,
  InServerID,
  OutGetAllServerStatus,
  OutGetAllServers,
  OutGetLogs,
} from '../models/index';
import {
    InConfigIDFromJSON,
    InConfigIDToJSON,
    InServerIDFromJSON,
    InServerIDToJSON,
    OutGetAllServerStatusFromJSON,
    OutGetAllServerStatusToJSON,
    OutGetAllServersFromJSON,
    OutGetAllServersToJSON,
    OutGetLogsFromJSON,
    OutGetLogsToJSON,
} from '../models/index';

export interface GetLogsRequest {
    inConfigID: InConfigID;
}

export interface RemoveServerRequest {
    inServerID: InServerID;
}

/**
 * 
 */
export class ServersApi extends runtime.BaseAPI {

    /**
     */
    async getAllServerStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OutGetAllServerStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/get_all_server_status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutGetAllServerStatusFromJSON(jsonValue));
    }

    /**
     */
    async getAllServerStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OutGetAllServerStatus> {
        const response = await this.getAllServerStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllServersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OutGetAllServers>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/get_all_servers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutGetAllServersFromJSON(jsonValue));
    }

    /**
     */
    async getAllServers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OutGetAllServers> {
        const response = await this.getAllServersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getLogsRaw(requestParameters: GetLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OutGetLogs>> {
        if (requestParameters['inConfigID'] == null) {
            throw new runtime.RequiredError(
                'inConfigID',
                'Required parameter "inConfigID" was null or undefined when calling getLogs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/get_logs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InConfigIDToJSON(requestParameters['inConfigID']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutGetLogsFromJSON(jsonValue));
    }

    /**
     */
    async getLogs(requestParameters: GetLogsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OutGetLogs> {
        const response = await this.getLogsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeServerRaw(requestParameters: RemoveServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['inServerID'] == null) {
            throw new runtime.RequiredError(
                'inServerID',
                'Required parameter "inServerID" was null or undefined when calling removeServer().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/remove_server`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InServerIDToJSON(requestParameters['inServerID']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeServer(requestParameters: RemoveServerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeServerRaw(requestParameters, initOverrides);
    }

}
