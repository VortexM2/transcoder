/* tslint:disable */
/* eslint-disable */
/**
 * live-cmaf-transcoder
 * API for the Live CMAF Transcoder
 *
 * The version of the OpenAPI document: 0.1.35
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InConfigID,
  InFFCreate,
  InFFUpdate,
  InSetState,
  OutGetAllFFConfig,
  OutGetFFStatus,
  VideoAdaptationSet,
  VideoRepresentation,
} from '../models/index';
import {
    InConfigIDFromJSON,
    InConfigIDToJSON,
    InFFCreateFromJSON,
    InFFCreateToJSON,
    InFFUpdateFromJSON,
    InFFUpdateToJSON,
    InSetStateFromJSON,
    InSetStateToJSON,
    OutGetAllFFConfigFromJSON,
    OutGetAllFFConfigToJSON,
    OutGetFFStatusFromJSON,
    OutGetFFStatusToJSON,
    VideoAdaptationSetFromJSON,
    VideoAdaptationSetToJSON,
    VideoRepresentationFromJSON,
    VideoRepresentationToJSON,
} from '../models/index';

export interface CreateRequest {
    inFFCreate: InFFCreate;
}

export interface GetFfCommandRequest {
    inConfigID: InConfigID;
}

export interface RemoveRequest {
    inConfigID: InConfigID;
}

export interface SetConfigStateRequest {
    inSetState: InSetState;
}

export interface UpdateRequest {
    inFFUpdate: InFFUpdate;
}

/**
 * 
 */
export class FFApi extends runtime.BaseAPI {

    /**
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['inFFCreate'] == null) {
            throw new runtime.RequiredError(
                'inFFCreate',
                'Required parameter "inFFCreate" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ff/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InFFCreateToJSON(requestParameters['inFFCreate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createDefaultVideoAdaptationSetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoAdaptationSet>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ff/create_default_video_adaptation_set`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoAdaptationSetFromJSON(jsonValue));
    }

    /**
     */
    async createDefaultVideoAdaptationSet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoAdaptationSet> {
        const response = await this.createDefaultVideoAdaptationSetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async createDefaultVideoRepresentationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VideoRepresentation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ff/create_default_video_representation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VideoRepresentationFromJSON(jsonValue));
    }

    /**
     */
    async createDefaultVideoRepresentation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VideoRepresentation> {
        const response = await this.createDefaultVideoRepresentationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllConfigsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OutGetAllFFConfig>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ff/get_all_configs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutGetAllFFConfigFromJSON(jsonValue));
    }

    /**
     */
    async getAllConfigs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OutGetAllFFConfig> {
        const response = await this.getAllConfigsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllStatusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OutGetFFStatus>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ff/get_all_status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OutGetFFStatusFromJSON(jsonValue));
    }

    /**
     */
    async getAllStatus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OutGetFFStatus> {
        const response = await this.getAllStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getFfCommandRaw(requestParameters: GetFfCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['inConfigID'] == null) {
            throw new runtime.RequiredError(
                'inConfigID',
                'Required parameter "inConfigID" was null or undefined when calling getFfCommand().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ff/get_ff_command`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InConfigIDToJSON(requestParameters['inConfigID']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getFfCommand(requestParameters: GetFfCommandRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getFfCommandRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeRaw(requestParameters: RemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['inConfigID'] == null) {
            throw new runtime.RequiredError(
                'inConfigID',
                'Required parameter "inConfigID" was null or undefined when calling remove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ff/remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InConfigIDToJSON(requestParameters['inConfigID']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async remove(requestParameters: RemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.removeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setConfigStateRaw(requestParameters: SetConfigStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['inSetState'] == null) {
            throw new runtime.RequiredError(
                'inSetState',
                'Required parameter "inSetState" was null or undefined when calling setConfigState().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ff/set_config_state`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InSetStateToJSON(requestParameters['inSetState']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async setConfigState(requestParameters: SetConfigStateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.setConfigStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters['inFFUpdate'] == null) {
            throw new runtime.RequiredError(
                'inFFUpdate',
                'Required parameter "inFFUpdate" was null or undefined when calling update().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ff/update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InFFUpdateToJSON(requestParameters['inFFUpdate']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
