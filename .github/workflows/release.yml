name: Release

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  release:
    name: Create a new Release
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          VERSION="$(gh release list --json isDraft,tagName --jq 'map(select(.isDraft == true)) | .[0].tagName')"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install cargo-set-version
        run: cargo install cargo-set-version

      - name: Run Tests
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Cleanup Test
        uses: actions-rs/cargo@v1
        with:
          command: clean

      - name: Bump to new version 
        run: |
          cargo set-version ${VERSION}
          cargo generate-lockfile
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          if [[ `git status --porcelain` ]]; then
            git commit Cargo.lock backend/Cargo.toml  -m "Bump to version ${VERSION}"
          else 
            echo "No changes to commit"
          fi
          git tag -a v${VERSION} -m "Release version $VERSION"
          echo "DOCKER_IMAGE=ghcr.io/sessystems/live-cmaf-transcoder:$VERSION" >> $GITHUB_ENV
          echo "IMAGE_FILENAME=sessystems-live-cmaf-transcoder-$VERSION.tar.gz" >> $GITHUB_ENV
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push changes and tag
        run: |
          git push origin main v${VERSION}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}  

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          config: .github/buildkitd.toml

      - name: Build and Push Docker images
        uses: docker/bake-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          files: docker-bake.hcl
          targets: all
          push: true

      - name: Check disk space
        run: df . -h

      - name: Cleanup Docker images
        run: docker image prune || true

      - name: Check disk space
        run: df . -h

      - name: Pull Docker image
        run: docker pull ${DOCKER_IMAGE}

      - name: Save Docker Image to tar file
        run: docker save ${DOCKER_IMAGE} | xz -T0 -c > ${IMAGE_FILENAME}

      - name: Upload Docker image to Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload v${{ env.VERSION }} ${{ env.IMAGE_FILENAME }}

      - name: Upload compose.yaml to Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload v${{ env.VERSION }} compose.yaml

      - name: Upload run.sh to Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload v${{ env.VERSION }} run.sh

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release edit v${{ env.VERSION }} --draft=false
