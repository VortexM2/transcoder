From 7902393705d25f0042a4ea447889b099ca988565 Mon Sep 17 00:00:00 2001
From: Xavier Scholtes <xavier.scholtes@ses.com>
Date: Thu, 12 Dec 2024 15:31:06 +0000
Subject: [PATCH] New option to apply an offset to Availabiliy Start Time,
 re-sync DASH Clock with encoder clock if a drift between the clocks is
 detected

---
 libavformat/dashenc.c | 39 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 38 insertions(+), 1 deletion(-)

diff --git a/libavformat/dashenc.c b/libavformat/dashenc.c
index 5cb38c4c31..fbfcf0b573 100644
--- a/libavformat/dashenc.c
+++ b/libavformat/dashenc.c
@@ -165,6 +165,7 @@ typedef struct DASHContext {
     int64_t total_duration;
     char availability_start_time[100];
     time_t start_time_s;
+    int64_t availability_start_time_us;
     int64_t presentation_time_offset;
     char dirname[1024];
     const char *single_file_name;  /* file names as specified in options */
@@ -203,6 +204,7 @@ typedef struct DASHContext {
     AVRational min_playback_rate;
     AVRational max_playback_rate;
     int64_t update_period;
+    int64_t ast_delay_us;
 } DASHContext;
 
 static const struct codec_string {
@@ -2064,6 +2066,20 @@ static int dash_parse_prft(DASHContext *c, AVPacket *pkt)
     return 0;
 }
 
+static int calc_expected_segment_index(DASHContext *c, AVPacket *pkt) {
+    
+    int64_t now_us = av_gettime();
+    OutputStream *os = &c->streams[pkt->stream_index];
+
+    int64_t timescale = c->use_timeline ? os->ctx->streams[0]->time_base.den : AV_TIME_BASE;
+    int64_t ellapsed_us = now_us - (c->availability_start_time_us - c->ast_delay_us);
+    if (ellapsed_us < 0) {
+        ellapsed_us = 0;
+    }
+
+    return av_rescale(ellapsed_us, timescale, os->seg_duration * AV_TIME_BASE);    
+}
+
 static int dash_write_packet(AVFormatContext *s, AVPacket *pkt)
 {
     DASHContext *c = s->priv_data;
@@ -2109,8 +2125,28 @@ static int dash_write_packet(AVFormatContext *s, AVPacket *pkt)
     if (!c->availability_start_time[0]) {
         int64_t start_time_us = av_gettime();
         c->start_time_s = start_time_us / 1000000;
+        c->availability_start_time_us = start_time_us + c->ast_delay_us;
         format_date(c->availability_start_time,
-                    sizeof(c->availability_start_time), start_time_us);
+                    sizeof(c->availability_start_time), start_time_us + c->ast_delay_us);
+    } else {
+
+        if (os->segment_index > 0 && c->use_template && !c->use_timeline) {
+
+            int expected_segment_index = calc_expected_segment_index(c, pkt);
+            if (expected_segment_index + 1 > os->segment_index || expected_segment_index < os->segment_index - 2) {
+                int after;
+                int64_t timescale = c->use_timeline ? os->ctx->streams[0]->time_base.den : AV_TIME_BASE;
+                int64_t start_time_us = av_gettime();
+                c->availability_start_time_us = start_time_us - av_rescale(os->segment_index -1, os->seg_duration * AV_TIME_BASE, timescale) + c->ast_delay_us;
+                format_date(c->availability_start_time,
+                        sizeof(c->availability_start_time), c->availability_start_time_us);
+
+                after = calc_expected_segment_index(c, pkt);
+                av_log(s, AV_LOG_WARNING, "Need update ast before=%d index=%d after=%d\n", 
+                    expected_segment_index, os->segment_index, after);
+            }
+        }
+
     }
 
     if (!os->packets_written)
@@ -2401,6 +2437,7 @@ static const AVOption options[] = {
     { "utc_timing_url", "URL of the page that will return the UTC timestamp in ISO format", OFFSET(utc_timing_url), AV_OPT_TYPE_STRING, { 0 }, 0, 0, E },
     { "window_size", "number of segments kept in the manifest", OFFSET(window_size), AV_OPT_TYPE_INT, { .i64 = 0 }, 0, INT_MAX, E },
     { "write_prft", "Write producer reference time element", OFFSET(write_prft), AV_OPT_TYPE_BOOL, {.i64 = -1}, -1, 1, E},
+    { "ast_delay_us", "add a delay to AvailabilityStartTime", OFFSET(ast_delay_us), AV_OPT_TYPE_INT64, {.i64 = 0}, 0, INT64_MAX, E},
     { NULL },
 };
 
-- 
2.39.2

